debug=5                        # 输出详细的日志
memlog=1
fork=no                        # 启动到前台，fork=yes则启动到后台
children=2                     # 在前台不起作用，如果fork=yes，则控制启动多个进程
log_stderror=yes               # 将LOG输出到标准错误（控制台）
log_facility=LOG_LOCAL0        # 日志输出，后台模式有用
disable_tcp=yes                # 简单起见，我们只用udp
disable_dns_blacklist = yes
auto_aliases=no
check_via=no
dns=off
rev_dns=off
listen=udp:192.168.1.118:7060    ＃监听的IP地址和端口，可以是多行，但前台模式只支持第一行

mpath="/usr/local/lib64/opensips/modules/"    ＃ 加载模块的路径

loadmodule "maxfwd.so"
loadmodule "sl.so"
loadmodule "db_postgres.so"
loadmodule "tm.so"
loadmodule "uri.so"
loadmodule "rr.so"
loadmodule "dialog.so"
loadmodule "mi_fifo.so"
loadmodule "signaling.so"
loadmodule "textops.so"
loadmodule "siptrace.so"
loadmodule "sipmsgops.so"                   # 1.8 版本以后才有
loadmodule "dispatcher.so"                  # 注册消息均衡(REGISTER)
loadmodule "load_balancer.so"               # 呼叫相关消息均衡(INVITE)

# 默认的数据库的连接参数
db_default_url="postgres://opensips:opensips@localhost/opensips"
#fifo模块的配置参数，其它模块类似
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

modparam("dialog", "db_mode", 1)
<!-- modparam("dialog", "db_url", "postgres://opensips:opensips@localhost/opensips") -->

modparam("rr","enable_double_rr",1)
modparam("rr","append_fromtag",1)

modparam("siptrace", "trace_on", 1)

# modparam("load_balancer", "db_url","postgres://opensips:opensips@localhost/opensips")

# dispatcher模块的配置参数
# modparam("dispatcher", "db_url", "postgres://opensips:opensips@localhost/opensips")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_interval", 5)
modparam("dispatcher", "ds_probing_threshhold", 2)
modparam("dispatcher", "ds_probing_mode", 1)

route{
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!has_totag()) { # 初始请求
		record_route();
	} else { # 后续请求——遵循指定的路由
		loose_route();
		t_relay();
		exit;
	}

	if ( is_method("CANCEL" )) { # 处理CANCEL及重传
		if ( t_check_trans() ) t_relay();
		exit;
	}

	# 从现在开始，我们就只有初始请求了

	if (is_method("INVITE")) {
		# 如果是 INVITE 消息的话，将调用load_balance函数选择一台可用的后端节点
		if (!load_balance("1","pstn","1")) {
			send_reply("503","Service Unavailable");
			exit;
		}
	} else if (is_method("REGISTER")) {
		# 如果是注册消息，则调用dispatcher模块的ds_select_dst函数分发请求
		# record_route();
		if (!ds_select_dst("1", "0")) {
			send_reply("503","Service Unavailable");
			exit;
		}
	} else { # 我们暂时不转发其它消息
		send_reply("405","Method Not Allowed");
		exit;
	}

	if (!t_relay()) { # 转发请求
		sl_reply_error();
	}
}

